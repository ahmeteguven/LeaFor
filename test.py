import tensorflow as tf
import numpy as np
import pandas as pd
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Parametreler
IMG_SIZE = (224, 224)  # Model giriÅŸ boyutu
BATCH_SIZE = 32
DATASET_PATH = "data"  # Veri setinin yolu

# Test verisini yÃ¼kleme
test_datagen = ImageDataGenerator(rescale=1.0 / 255)  # Veriyi normalize etme
test_generator = test_datagen.flow_from_directory(
    DATASET_PATH + "/test",
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False  # KarÄ±ÅŸÄ±k olmamasÄ± iÃ§in
)

# KullanÄ±lacak modeller ve isimleri
model_paths = {
    "VGG16": "vgg16_finetuned.h5",
    "MobileNetV2": "mobilenet_model.h5",
    "NASNetMobile": "nasnetmobile_finetuned.h5"
}

# SonuÃ§larÄ± saklamak iÃ§in liste
results = []

# Her model iÃ§in doÄŸruluk hesaplama
for model_name, model_path in model_paths.items():
    print(f"âœ… {model_name} modeli yÃ¼kleniyor ve test ediliyor...")

    # Modeli yÃ¼kle
    model = tf.keras.models.load_model(model_path)

    # Test verisi Ã¼zerinde tahmin yap
    test_loss, test_acc = model.evaluate(test_generator, verbose=1)

    # SonuÃ§larÄ± kaydet
    results.append([model_name, test_acc * 100])  # YÃ¼zdelik olarak kaydet

# SonuÃ§larÄ± Pandas tablosu olarak gÃ¶sterme
df_results = pd.DataFrame(results, columns=["Model AdÄ±", "Test DoÄŸruluk (%)"])
print("\nğŸ“Š Test Veri Seti Ãœzerindeki Model PerformanslarÄ±:\n")
print(df_results)

# EÄŸer tablonun grafik halinde gÃ¶sterilmesini istiyorsan:
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
plt.bar(df_results["Model AdÄ±"], df_results["Test DoÄŸruluk (%)"], color=['blue', 'green', 'red'])
plt.xlabel("Model AdÄ±")
plt.ylabel("Test DoÄŸruluk (%)")
plt.title("Modellerin Test Veri Setindeki DoÄŸruluk OranlarÄ±")
plt.ylim(0, 100)
plt.show()
